devtools::load_all(".")
foo
devtools::load_all(".")
devtools::load_all(".")
#' A brief introduction to this function.
#' @param x1 explain what is x1
#' @param x2
#' @return explain what is returned by this function.
#' @export
#' @examples foo()
foo <-function (rankedList, geneSet, minLenGeneSet = 5, alternative = "greater",
moreDetails = FALSE, verbose = TRUE)
{
ccall <- match.call()
gs <- which(geneSet %in% names(rankedList))
if (length(gs) < minLenGeneSet) {
if (verbose)
message("The number of elements of the gene set is less than the minimum allowed.")
ans <- list()
class(ans) <- "mwwGST"
return(ans)
}
gs <- geneSet[gs]
outside_gs <- setdiff(names(rankedList), gs)
ans <- list()
ans$call <- ccall
ans$alternative <- alternative
ans$originalGeneSetCount <- length(geneSet)
ans$actualGeneSetCount <- length(gs)
ans$actualGeneSet <- gs
ans$rankedList <- rankedList
ans$lengthOfRankedList <- length(rankedList)
tmp <- wilcox.test(rankedList[gs], rankedList[outside_gs], alternative = alternative)
ans$statistic <- tmp$statistic; names(ans$statistic) <- NULL
ans$nes <- tmp$statistic/length(gs)/length(outside_gs); names(ans$nes) <- NULL
ans$pu <- ans$nes/(1 - ans$nes)
ans$log.pu <- log2(ans$pu)
ans$p.value <- tmp$p.value
if (!moreDetails)
ans$rankedList <- NULL
class(ans) <- "mwwGST"
invisible(ans)
}
devtools::load_all(".")
foo()''
foo()
devtools::load_all(".")
library(yaGST)
data("rankedList")
geneSet <- sample(tail(names(rankedList), 5000), 100)
test <- foo(rankedList = rankedList,geneSet = geneSet,moreDetails = TRUE)
test
test$zscore
devtools::load_all(".")
data("rankedList")
geneSet <- sample(tail(names(rankedList), 5000), 100)
test <- foo(rankedList = rankedList,geneSet = geneSet,moreDetails = TRUE)
test
test$lengthOfRankedList
View(test)
ans$log.pu <- log2(ans$pu)
ans$p.value <- tmp$p.value
ans$lengthOfRankedList <- length(rankedList)
tmp <- wilcox.test(rankedList[gs], rankedList[outside_gs], alternative = alternative)
ans$statistic <- tmp$statistic; names(ans$statistic) <- NULL
#' A brief introduction to this function.
#' @param x1 explain what is x1
#' @param x2
#' @return explain what is returned by this function.
#' @export
#' @examples foo()
foo <-function (rankedList, geneSet, minLenGeneSet = 5, alternative = "greater",
moreDetails = FALSE, verbose = TRUE)
{
ccall <- match.call()
gs <- which(geneSet %in% names(rankedList))
if (length(gs) < minLenGeneSet) {
if (verbose)
message("The number of elements of the gene set is less than the minimum allowed.")
ans <- list()
class(ans) <- "mwwGST"
return(ans)
}
gs <- geneSet[gs]
outside_gs <- setdiff(names(rankedList), gs)
ans <- list()
ans$call <- ccall
ans$alternative <- alternative
ans$originalGeneSetCount <- length(geneSet)
ans$actualGeneSetCount <- length(gs)
ans$actualGeneSet <- gs
ans$rankedList <- rankedList
ans$lengthOfRankedList <- length(rankedList)
tmp <- wilcox.test(rankedList[gs], rankedList[outside_gs], alternative = alternative)
ans$statistic <- tmp$statistic; names(ans$statistic) <- NULL
ans$nes <- tmp$statistic/length(gs)/length(outside_gs); names(ans$nes) <- NULL
ans$pu <- ans$nes/(1 - ans$nes)
ans$log.pu <- log2(ans$pu)
ans$p.value <- tmp$p.value
ans$sigma <- sqrt(length(gs)*length(outside_gs)*(ans$lengthOfRankedList + 1)/12)
ans$mu <-(length(gs)*length(outside_gs)/2)
ans$zscore <- (tmp$statistic - ans$mu)/ans$sigma
if (!moreDetails)
ans$rankedList <- NULL
class(ans) <- "mwwGST"
invisible(ans)
}
test <- foo(rankedList = rankedList,geneSet = geneSet,moreDetails = TRUE)
test
test[["statistic"]]
source('C:/Users/liusha1/Desktop/rmickey-master/R/foo.R', echo=TRUE)
source('C:/Users/liusha1/Desktop/rmickey-master/R/foo.R', echo=TRUE)
devtools::load_all(".")
test <- foo(rankedList = rankedList,geneSet = geneSet,moreDetails = TRUE)
test
devtools::load_all(".")
test <- foo(rankedList = rankedList,geneSet = geneSet,moreDetails = TRUE)
test
test$zscore
View(test)
geneSet <- sample(tail(names(rankedList), 5000), 100)
geneSet <- sample(tail(names(rankedList), 5000), 10)
test <- foo(rankedList = rankedList,geneSet = geneSet,moreDetails = TRUE)
test
test$zscore
View(test)
View(test)
View(test)
View(test)
View(test)
View(test)
test
devtools::load_all(".")
test
test$zscore
geneSet <- sample(tail(names(rankedList), 5000), 1000)
test <- foo(rankedList = rankedList,geneSet = geneSet,moreDetails = TRUE)
test$zscore
geneSet <- sample(tail(names(rankedList), 5000), 3)
test <- foo(rankedList = rankedList,geneSet = geneSet,moreDetails = TRUE)
test
geneSet <- sample(tail(names(rankedList), 5000), 30)
test <- foo(rankedList = rankedList,geneSet = geneSet,moreDetails = TRUE)
test
View(test)
